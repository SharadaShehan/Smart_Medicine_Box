[
    {
        "id": "401e3b9f05284c7f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0a28a47fef5d42d6",
        "type": "ui_group",
        "name": "Alarms",
        "tab": "1ba49d34a2957cd6",
        "order": 2,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ae32a80a61d72eba",
        "type": "ui_group",
        "name": "Temperature & Humidity",
        "tab": "1ba49d34a2957cd6",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7f9a07bb3fd15f32",
        "type": "ui_group",
        "name": "Light Intensity",
        "tab": "1ba49d34a2957cd6",
        "order": 3,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0c3c270cb8ab1aa6",
        "type": "ui_group",
        "name": "Custom_Shade_Controller",
        "tab": "1ba49d34a2957cd6",
        "order": 6,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "50d6234b4391f72d",
        "type": "ui_group",
        "name": "Shade Controller",
        "tab": "1ba49d34a2957cd6",
        "order": 4,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a79c16c78e1e4456",
        "type": "ui_group",
        "name": "New_Medicine",
        "tab": "1ba49d34a2957cd6",
        "order": 5,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "078c7d6395e7af75",
        "type": "ui_group",
        "name": "Saved_Medicine",
        "tab": "1ba49d34a2957cd6",
        "order": 7,
        "disp": false,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1ba49d34a2957cd6",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c39661a1f9e0e2d",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4f04a5cd5db49f4d",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "./isrgrootx1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "5bd5d9ab086b9bc1",
        "type": "mqtt-broker",
        "name": "HiveMQTLS",
        "broker": "4d6452760f2643e491d02ba1c4bd11bc.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "4f04a5cd5db49f4d",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "26307f6a98f9da4d",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "ae32a80a61d72eba",
        "order": 3,
        "width": 7,
        "height": 1
    },
    {
        "id": "a8c5fc64c7fa666a",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "0a28a47fef5d42d6",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "a5fc8376123c1f8f",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "7f9a07bb3fd15f32",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "edf3afe0023a7c71",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "7f9a07bb3fd15f32",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "1142f5934f9f716b",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "7f9a07bb3fd15f32",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "436f19cab6f46356",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "7f9a07bb3fd15f32",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "8bfc2a24719229d5",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "7f9a07bb3fd15f32",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "de68a07610751ed1",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "7f9a07bb3fd15f32",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "01d1693eda2530fa",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "7f9a07bb3fd15f32",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "eaf96bf589ee6d5b",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "7f9a07bb3fd15f32",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "2ced78c8e1cc1462",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "078c7d6395e7af75",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "3fe3b08cc6654c61",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "078c7d6395e7af75",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "b693ee27068c4bb2",
        "type": "ui_spacer",
        "z": "401e3b9f05284c7f",
        "name": "spacer",
        "group": "078c7d6395e7af75",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "23ed16eaa62003b5",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Alarm Status",
        "topic": "is-alarm-on-from-medibox",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 180,
        "wires": [
            [
                "66ca579bf83a9dbc"
            ]
        ]
    },
    {
        "id": "1c444f84ab28b5b3",
        "type": "ui_switch",
        "z": "401e3b9f05284c7f",
        "name": "",
        "label": "Alarms Enabled",
        "tooltip": "",
        "group": "0a28a47fef5d42d6",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 640,
        "y": 180,
        "wires": [
            [
                "63b08d19c25bbc0d"
            ]
        ]
    },
    {
        "id": "68f31cf673c363aa",
        "type": "mqtt out",
        "z": "401e3b9f05284c7f",
        "name": "Publish Alarm Status",
        "topic": "is-alarm-on-from-dashboard",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5bd5d9ab086b9bc1",
        "x": 1420,
        "y": 180,
        "wires": []
    },
    {
        "id": "87e366957b1a3006",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Temperature",
        "topic": "temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "a61ca84306a923d7",
                "c1336e37c783fed9"
            ]
        ]
    },
    {
        "id": "a61ca84306a923d7",
        "type": "ui_gauge",
        "z": "401e3b9f05284c7f",
        "name": "Show Temperature",
        "group": "ae32a80a61d72eba",
        "order": 1,
        "width": 4,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "units",
        "format": "{{payload}}",
        "min": "-40",
        "max": "80",
        "colors": [
            "#ca6464",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "26",
        "seg2": "32",
        "diff": false,
        "className": "",
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "e558af3d38ee4c8a",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Humidity",
        "topic": "humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1020,
        "y": 80,
        "wires": [
            [
                "95c5635bbfd2c586",
                "abba287f0a5bf5e4"
            ]
        ]
    },
    {
        "id": "95c5635bbfd2c586",
        "type": "ui_gauge",
        "z": "401e3b9f05284c7f",
        "name": "Show Humidity",
        "group": "ae32a80a61d72eba",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "gage",
        "title": "Humidity",
        "label": "units",
        "format": "{{payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#ca6464",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "80",
        "diff": false,
        "className": "",
        "x": 1300,
        "y": 60,
        "wires": []
    },
    {
        "id": "c1336e37c783fed9",
        "type": "ui_chart",
        "z": "401e3b9f05284c7f",
        "name": "Show Temperature Variation",
        "group": "ae32a80a61d72eba",
        "order": 2,
        "width": 3,
        "height": 3,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "60",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 460,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "abba287f0a5bf5e4",
        "type": "ui_chart",
        "z": "401e3b9f05284c7f",
        "name": "Show Humidity Variation",
        "group": "ae32a80a61d72eba",
        "order": 5,
        "width": 3,
        "height": 3,
        "label": "Humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": false,
        "ymin": "30",
        "ymax": "90",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1330,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "522416c1e4aaf84a",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Alarm 1 Time",
        "topic": "alarm-1-time-from-medibox",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 260,
        "wires": [
            [
                "e98c91382544f22d"
            ]
        ]
    },
    {
        "id": "43234aecb5ba5bab",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Alarm 2 Time",
        "topic": "alarm-2-time-from-medibox",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "743259b42d6d560d"
            ]
        ]
    },
    {
        "id": "bdf64bc4583769aa",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Alarm 3 Time",
        "topic": "alarm-3-time-from-medibox",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 340,
        "wires": [
            [
                "0a10851ef799a34f"
            ]
        ]
    },
    {
        "id": "df841148d864f8ef",
        "type": "ui_text_input",
        "z": "401e3b9f05284c7f",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "0a28a47fef5d42d6",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "time",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 620,
        "y": 260,
        "wires": [
            [
                "0b34f756301b35d1"
            ]
        ]
    },
    {
        "id": "35b49fc5ca452df5",
        "type": "ui_text_input",
        "z": "401e3b9f05284c7f",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "0a28a47fef5d42d6",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "time",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 620,
        "y": 300,
        "wires": [
            [
                "cd6b86e2d2954c06"
            ]
        ]
    },
    {
        "id": "69d463fb4eb685c7",
        "type": "ui_text_input",
        "z": "401e3b9f05284c7f",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "0a28a47fef5d42d6",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "time",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 620,
        "y": 340,
        "wires": [
            [
                "345924e730fef2be"
            ]
        ]
    },
    {
        "id": "ac1bab44d3d4108e",
        "type": "mqtt out",
        "z": "401e3b9f05284c7f",
        "name": "Publish Alarm 1 Time",
        "topic": "alarm-1-time-from-dashboard",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5bd5d9ab086b9bc1",
        "x": 1120,
        "y": 260,
        "wires": []
    },
    {
        "id": "efedfe0e27540f58",
        "type": "mqtt out",
        "z": "401e3b9f05284c7f",
        "name": "Publish Alarm 3 Time",
        "topic": "alarm-3-time-from-dashboard",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5bd5d9ab086b9bc1",
        "x": 1120,
        "y": 340,
        "wires": []
    },
    {
        "id": "4d7c1b389e3f5f03",
        "type": "mqtt out",
        "z": "401e3b9f05284c7f",
        "name": "Publish Alarm 2 Time",
        "topic": "alarm-2-time-from-dashboard",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5bd5d9ab086b9bc1",
        "x": 1120,
        "y": 300,
        "wires": []
    },
    {
        "id": "66ca579bf83a9dbc",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Alarm On/OFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alarms_on",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 180,
        "wires": [
            [
                "1c444f84ab28b5b3"
            ]
        ]
    },
    {
        "id": "63b08d19c25bbc0d",
        "type": "switch",
        "z": "401e3b9f05284c7f",
        "name": "Alarm already set ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "alarms_on",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 180,
        "wires": [
            [],
            [
                "fbbeb939ade20ba7"
            ]
        ]
    },
    {
        "id": "fbbeb939ade20ba7",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Alarm On/OFF",
        "rules": [
            {
                "t": "set",
                "p": "alarms_on",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "68f31cf673c363aa"
            ]
        ]
    },
    {
        "id": "e98c91382544f22d",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Alarm 1 Time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alarm1_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 260,
        "wires": [
            [
                "df841148d864f8ef"
            ]
        ]
    },
    {
        "id": "0b34f756301b35d1",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Alarm 1 Time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alarm1_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 260,
        "wires": [
            [
                "ac1bab44d3d4108e"
            ]
        ]
    },
    {
        "id": "743259b42d6d560d",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Alarm 2 Time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alarm2_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 300,
        "wires": [
            [
                "35b49fc5ca452df5"
            ]
        ]
    },
    {
        "id": "0a10851ef799a34f",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Alarm 3 Time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alarm3_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 340,
        "wires": [
            [
                "69d463fb4eb685c7"
            ]
        ]
    },
    {
        "id": "345924e730fef2be",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Alarm 3 Time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alarm3_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 340,
        "wires": [
            [
                "efedfe0e27540f58"
            ]
        ]
    },
    {
        "id": "cd6b86e2d2954c06",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Alarm 2 Time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "alarm2_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 300,
        "wires": [
            [
                "4d7c1b389e3f5f03"
            ]
        ]
    },
    {
        "id": "199bc17793a5bc5f",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Left LDR Intensity",
        "topic": "light-intensity-left-ldr",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 420,
        "wires": [
            [
                "a1156c2914a9dd2a"
            ]
        ]
    },
    {
        "id": "1bf3cf2e736ca97c",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Right LDR Intensity",
        "topic": "light-intensity-right-ldr",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 460,
        "wires": [
            [
                "f5e275dbcad98bb8"
            ]
        ]
    },
    {
        "id": "0da143e6f2e9c2f2",
        "type": "ui_gauge",
        "z": "401e3b9f05284c7f",
        "name": "Current Max Light Intensity",
        "group": "7f9a07bb3fd15f32",
        "order": 3,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{payload}}",
        "min": "0",
        "max": "1",
        "colors": [
            "#ca6464",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1840,
        "y": 420,
        "wires": []
    },
    {
        "id": "a1156c2914a9dd2a",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Left LDR Light Intensity",
        "rules": [
            {
                "t": "set",
                "p": "left_light_intensity",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 420,
        "wires": [
            [
                "3b94149e3d19ce35"
            ]
        ]
    },
    {
        "id": "f5e275dbcad98bb8",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Right LDR Light Intensity",
        "rules": [
            {
                "t": "set",
                "p": "right_light_intensity",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 460,
        "wires": [
            [
                "3b94149e3d19ce35"
            ]
        ]
    },
    {
        "id": "3b94149e3d19ce35",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "Find LDR with Higher Intensity",
        "func": "let left_light_intensity = global.get(\"left_light_intensity\");\nlet right_light_intensity = global.get(\"right_light_intensity\");\n\nif (left_light_intensity > right_light_intensity) {\n    return [{ payload: \"Left LDR\" }, {payload: left_light_intensity}];\n} else {\n    return [{ payload: \"Right LDR\" }, {payload: right_light_intensity}];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 440,
        "wires": [
            [
                "b3321ca47d508a3a"
            ],
            [
                "5f1b6c7a05e75610"
            ]
        ]
    },
    {
        "id": "e9b71e7d85458c58",
        "type": "ui_text",
        "z": "401e3b9f05284c7f",
        "group": "7f9a07bb3fd15f32",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Show LDR with Higher Intensity",
        "label": "<b>LDR (Higher Intensity) : </b>",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1490,
        "y": 420,
        "wires": []
    },
    {
        "id": "5f1b6c7a05e75610",
        "type": "range",
        "z": "401e3b9f05284c7f",
        "minin": "0",
        "maxin": "4095",
        "minout": "0",
        "maxout": "1",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale Intensity Value",
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "bf9fccf105902e61"
            ]
        ]
    },
    {
        "id": "bf9fccf105902e61",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "Round Intensity Value",
        "func": "\nreturn {\n    payload: (msg.payload == undefined) ? 0 : parseFloat(msg.payload.toFixed(3))\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 460,
        "wires": [
            [
                "0da143e6f2e9c2f2",
                "ae40a2c48967e617",
                "83fd7b54fd52d4b9"
            ]
        ]
    },
    {
        "id": "ae40a2c48967e617",
        "type": "ui_chart",
        "z": "401e3b9f05284c7f",
        "name": "Max Light Intensity",
        "group": "7f9a07bb3fd15f32",
        "order": 11,
        "width": 0,
        "height": 0,
        "label": "Light Intensity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1810,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "da3aee13beace699",
        "type": "ui_slider",
        "z": "401e3b9f05284c7f",
        "name": "Get Minimum Angle",
        "label": "Minimum Angle",
        "tooltip": "",
        "group": "0c3c270cb8ab1aa6",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "120",
        "step": "10",
        "className": "",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "2b3fe9286ccc80a7"
            ]
        ]
    },
    {
        "id": "d04aae407e9e532c",
        "type": "ui_slider",
        "z": "401e3b9f05284c7f",
        "name": "Get Controlling Factor",
        "label": "Controlling Factor",
        "tooltip": "",
        "group": "0c3c270cb8ab1aa6",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "1",
        "step": "0.05",
        "className": "",
        "x": 120,
        "y": 580,
        "wires": [
            [
                "afabc3192bdf79ce"
            ]
        ]
    },
    {
        "id": "2b3fe9286ccc80a7",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Minimum Angle",
        "rules": [
            {
                "t": "set",
                "p": "minimum_angle",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 540,
        "wires": [
            [
                "805c58f43d738397"
            ]
        ]
    },
    {
        "id": "afabc3192bdf79ce",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Controlling Factor",
        "rules": [
            {
                "t": "set",
                "p": "controlling_factor",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 580,
        "wires": [
            [
                "805c58f43d738397"
            ]
        ]
    },
    {
        "id": "83fd7b54fd52d4b9",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Higher Intensity",
        "rules": [
            {
                "t": "set",
                "p": "max_intensity",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1810,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b3321ca47d508a3a",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set LDR with Higher Intensity",
        "rules": [
            {
                "t": "set",
                "p": "max_intensity_ldr",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 420,
        "wires": [
            [
                "e9b71e7d85458c58"
            ]
        ]
    },
    {
        "id": "805c58f43d738397",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "Calculate Motor Angle",
        "func": "let max_intensity_ldr = global.get(\"max_intensity_ldr\");\nlet max_intensity = parseFloat(global.get(\"max_intensity\"));\nlet minimum_angle = parseInt(global.get(\"minimum_angle\"));\nlet controlling_factor = parseFloat(global.get(\"controlling_factor\"));\nlet calc_motor_angle, motor_angle;\nlet d_value;\n\nif (max_intensity_ldr == \"Left LDR\") {\n    d_value = 1.5;\n} else {\n    d_value = 0.5;\n}\n\ncalc_motor_angle = Math.round(minimum_angle * d_value + (180 - minimum_angle) * max_intensity * controlling_factor);\nmotor_angle = (calc_motor_angle < 180) ? calc_motor_angle : 180;\n\nreturn { payload: motor_angle }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 560,
        "wires": [
            [
                "50ae98ea4bb779d4"
            ]
        ]
    },
    {
        "id": "fb17086d0914bca1",
        "type": "ui_dropdown",
        "z": "401e3b9f05284c7f",
        "name": "Select a Medicine",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "50d6234b4391f72d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Custom",
                "value": "Custom",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 670,
        "y": 880,
        "wires": [
            [
                "32f3039775637c3a"
            ]
        ]
    },
    {
        "id": "f59e4d0613d2339b",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "Return Formatted Medicines list",
        "func": "let medicines = global.get(\"medicines\");\n\nif (!Array.isArray(medicines)) {\n    medicines = [];\n    medicines.unshift({ \"Custom\": {\"medicine_name\": \"Custom\"}});\n    medicines.unshift({ \"New Medicine\": { \"medicine_name\": \"New\" }});\n    global.set(\"medicines\", medicines);\n}\n\nlet convertedMedicines = medicines.map(obj => {\n    return { [Object.keys(obj)[0]]: Object.values(obj)[0][\"medicine_name\"] };\n});\n\nmsg.options = convertedMedicines;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 880,
        "wires": [
            [
                "fb17086d0914bca1"
            ]
        ]
    },
    {
        "id": "a16bb9c4111418bb",
        "type": "inject",
        "z": "401e3b9f05284c7f",
        "name": "Trigger at Deployment",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "f59e4d0613d2339b"
            ]
        ]
    },
    {
        "id": "32f3039775637c3a",
        "type": "switch",
        "z": "401e3b9f05284c7f",
        "name": "Selected Motor Angle Option ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Custom",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "New",
                "vt": "str"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 930,
        "y": 880,
        "wires": [
            [
                "557b824ae97ab091"
            ],
            [
                "58878316ba710ec5"
            ],
            [
                "7d2aa1f2f7cff5d0",
                "bd47ad02889ae8ca"
            ]
        ]
    },
    {
        "id": "557b824ae97ab091",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Custom Minimum Angle, Controlling Factor Option",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Home_Custom_Shade_Controller\"],\"hide\":[\"Home_New_Medicine\",\"Home_Saved_Medicine\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 780,
        "wires": [
            [
                "581370ca6e363bd7"
            ]
        ]
    },
    {
        "id": "7d2aa1f2f7cff5d0",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Select from Predefined Medicines Option",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Home_Saved_Medicine\"],\"hide\":[\"Home_Custom_Shade_Controller\",\"Home_New_Medicine\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1340,
        "y": 860,
        "wires": [
            [
                "581370ca6e363bd7"
            ]
        ]
    },
    {
        "id": "581370ca6e363bd7",
        "type": "ui_ui_control",
        "z": "401e3b9f05284c7f",
        "name": "Update UI Groups for Selected Option",
        "events": "all",
        "x": 1790,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "e7fd24de316dac62",
        "type": "ui_form",
        "z": "401e3b9f05284c7f",
        "name": "Get New Medicine Details",
        "label": "",
        "group": "a79c16c78e1e4456",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Minimum Angle",
                "value": "minimum_angle",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Controlling Factor",
                "value": "controlling_factor",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "name": "",
            "minimum_angle": "",
            "controlling_factor": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "c56a9dd914f53832"
            ]
        ]
    },
    {
        "id": "58878316ba710ec5",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Add New Medicine with Predefined Angle Option",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Home_New_Medicine\"],\"hide\":[\"Home_Custom_Shade_Controller\",\"Home_Saved_Medicine\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 820,
        "wires": [
            [
                "581370ca6e363bd7"
            ]
        ]
    },
    {
        "id": "c56a9dd914f53832",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "Add New Medicine",
        "func": "let medicines = global.get(\"medicines\");\n\nif (!Array.isArray(medicines)) {\n    medicines = [{ \"Custom\": { \"medicine_name\": \"Custom\" } }, { \"New Medicine\": { \"medicine_name\": \"New\" } }];\n}\n\n\nlet medicine_name = msg.payload.name;\nlet minimum_angle = msg.payload.minimum_angle;\nlet controlling_factor = msg.payload.controlling_factor;\n\nif (minimum_angle < 0 || minimum_angle > 120 || controlling_factor < 0 || controlling_factor > 1) {\n    return { \"payload\": false };\n}\n\nvar new_medicine = {};\nnew_medicine[medicine_name] = {\n    \"medicine_name\": medicine_name,\n    \"minimum_angle\": minimum_angle,\n    \"controlling_factor\": controlling_factor\n}\nmedicines.unshift(new_medicine);\nglobal.set(\"medicines\", medicines);\n\nreturn { \"payload\": true };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "c7a570c7f12ae8c1"
            ]
        ]
    },
    {
        "id": "c7a570c7f12ae8c1",
        "type": "switch",
        "z": "401e3b9f05284c7f",
        "name": "Adding Medicine Successful ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 680,
        "wires": [
            [
                "f59e4d0613d2339b",
                "a082284bc75dbc14"
            ],
            [
                "87a3b800228fc91f"
            ]
        ]
    },
    {
        "id": "6f94457bb79fd212",
        "type": "ui_toast",
        "z": "401e3b9f05284c7f",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Show Success Message",
        "x": 1410,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "a082284bc75dbc14",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Success Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "New Medicine Added",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 660,
        "wires": [
            [
                "6f94457bb79fd212"
            ]
        ]
    },
    {
        "id": "bd47ad02889ae8ca",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "Return Details of Selected Medicine",
        "func": "let medicines = global.get(\"medicines\");\nlet medicine_name = msg.payload;\n\nlet medicine_obj_nested = medicines.find(obj => Object.keys(obj)[0] === medicine_name);\nlet medicine_obj = medicine_obj_nested[Object.keys(medicine_obj_nested)[0]];\n\nglobal.set(\"minimum_angle\",parseInt(medicine_obj.minimum_angle));\nglobal.set(\"controlling_factor\",parseFloat(medicine_obj.controlling_factor));\n\nreturn [{\n    \"payload\": medicine_obj.medicine_name\n}, {\n    \"payload\": parseInt(medicine_obj.minimum_angle)\n}, {\n    \"payload\": parseFloat(medicine_obj.controlling_factor)\n}];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 960,
        "wires": [
            [
                "edf5b4b7816e081a",
                "ffcf3d24cea358b0"
            ],
            [
                "781c7b64eb876780"
            ],
            [
                "2e7355a59ccebd01"
            ]
        ]
    },
    {
        "id": "50ae98ea4bb779d4",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Motor Angle",
        "rules": [
            {
                "t": "set",
                "p": "motor_angle",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 560,
        "wires": [
            [
                "2b34b5da4aa9eb43",
                "d73579d1beb163c0"
            ]
        ]
    },
    {
        "id": "2b34b5da4aa9eb43",
        "type": "mqtt out",
        "z": "401e3b9f05284c7f",
        "name": "Publish Motor Angle",
        "topic": "motor-angle",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5bd5d9ab086b9bc1",
        "x": 1260,
        "y": 580,
        "wires": []
    },
    {
        "id": "b5b0c6aa27ed8f99",
        "type": "ui_toast",
        "z": "401e3b9f05284c7f",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Show Failed Message",
        "x": 1380,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "87a3b800228fc91f",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Failed Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Failed to add medicine. Check parameters !",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 700,
        "wires": [
            [
                "b5b0c6aa27ed8f99"
            ]
        ]
    },
    {
        "id": "edf5b4b7816e081a",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "Calculate Motor Angle",
        "func": "let max_intensity_ldr = global.get(\"max_intensity_ldr\");\nlet max_intensity = parseFloat(global.get(\"max_intensity\"));\nlet minimum_angle = parseInt(global.get(\"minimum_angle\"));\nlet controlling_factor = parseFloat(global.get(\"controlling_factor\"));\nlet calc_motor_angle, motor_angle;\nlet d_value;\n\nif (max_intensity_ldr == \"Left LDR\") {\n    d_value = 1.5;\n} else {\n    d_value = 0.5;\n}\n\ncalc_motor_angle = Math.round(minimum_angle * d_value + (180 - minimum_angle) * max_intensity * controlling_factor);\nmotor_angle = (calc_motor_angle < 180) ? calc_motor_angle : 180;\n\nreturn { payload: motor_angle }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 940,
        "wires": [
            [
                "8c4887e0e9b01904"
            ]
        ]
    },
    {
        "id": "8c4887e0e9b01904",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Set Motor Angle",
        "rules": [
            {
                "t": "set",
                "p": "motor_angle",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1800,
        "y": 940,
        "wires": [
            [
                "f3b5c095c07860d1",
                "a5be454ac6c02564"
            ]
        ]
    },
    {
        "id": "f3b5c095c07860d1",
        "type": "mqtt out",
        "z": "401e3b9f05284c7f",
        "name": "Publish Motor Angle",
        "topic": "motor-angle",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5bd5d9ab086b9bc1",
        "x": 2040,
        "y": 900,
        "wires": []
    },
    {
        "id": "d73579d1beb163c0",
        "type": "ui_gauge",
        "z": "401e3b9f05284c7f",
        "name": "Show Motor Angle",
        "group": "0c3c270cb8ab1aa6",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "units",
        "format": "{{payload}}",
        "min": "0",
        "max": "180",
        "colors": [
            "#ca6464",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "0",
        "seg2": "180",
        "diff": false,
        "className": "",
        "x": 1250,
        "y": 540,
        "wires": []
    },
    {
        "id": "ed87f002cd1cbfc9",
        "type": "ui_text",
        "z": "401e3b9f05284c7f",
        "group": "0c3c270cb8ab1aa6",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Motor Angle Text",
        "label": "",
        "format": "<h3>Motor Angle</h3>",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1470,
        "y": 540,
        "wires": []
    },
    {
        "id": "a5be454ac6c02564",
        "type": "ui_gauge",
        "z": "401e3b9f05284c7f",
        "name": "Show Motor Angle",
        "group": "078c7d6395e7af75",
        "order": 7,
        "width": 7,
        "height": 4,
        "gtype": "gage",
        "title": "Motor Angle",
        "label": "units",
        "format": "{{payload}}",
        "min": "0",
        "max": "180",
        "colors": [
            "#ca6464",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "0",
        "seg2": "180",
        "diff": false,
        "className": "",
        "x": 2030,
        "y": 960,
        "wires": []
    },
    {
        "id": "781c7b64eb876780",
        "type": "ui_gauge",
        "z": "401e3b9f05284c7f",
        "name": "Show Minimum Angle",
        "group": "078c7d6395e7af75",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Minimum Angle",
        "label": "units",
        "format": "{{payload}}",
        "min": "0",
        "max": "120",
        "colors": [
            "#ca6464",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "0",
        "seg2": "120",
        "diff": false,
        "className": "",
        "x": 1580,
        "y": 980,
        "wires": []
    },
    {
        "id": "2e7355a59ccebd01",
        "type": "ui_gauge",
        "z": "401e3b9f05284c7f",
        "name": "Show Controlling Factor",
        "group": "078c7d6395e7af75",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Controlling Factor",
        "label": "units",
        "format": "{{payload}}",
        "min": "0",
        "max": "1",
        "colors": [
            "#ca6464",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "0",
        "seg2": "1",
        "diff": false,
        "className": "",
        "x": 1590,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ffcf3d24cea358b0",
        "type": "ui_text",
        "z": "401e3b9f05284c7f",
        "group": "078c7d6395e7af75",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Show Medicine Name",
        "label": "<b>Medicine : </b>",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#00c291",
        "x": 1580,
        "y": 900,
        "wires": []
    },
    {
        "id": "d287f58b6c797297",
        "type": "ui_text",
        "z": "401e3b9f05284c7f",
        "group": "0a28a47fef5d42d6",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Alarm 1 Text",
        "label": "Alarm 1",
        "format": "",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#00c291",
        "x": 1350,
        "y": 260,
        "wires": []
    },
    {
        "id": "1297e36d10a34e03",
        "type": "ui_text",
        "z": "401e3b9f05284c7f",
        "group": "0a28a47fef5d42d6",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Alarm 2 Text",
        "label": "Alarm 2",
        "format": "",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#00c291",
        "x": 1350,
        "y": 300,
        "wires": []
    },
    {
        "id": "dbcd9970c375e01a",
        "type": "ui_text",
        "z": "401e3b9f05284c7f",
        "group": "0a28a47fef5d42d6",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "Alarm 3 Text",
        "label": "Alarm 3",
        "format": "",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#00c291",
        "x": 1350,
        "y": 340,
        "wires": []
    },
    {
        "id": "a2a6244eb314fd4e",
        "type": "ui_button",
        "z": "401e3b9f05284c7f",
        "name": "",
        "group": "0a28a47fef5d42d6",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Turn Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 700,
        "y": 1100,
        "wires": [
            [
                "32296f35d342d65a"
            ]
        ]
    },
    {
        "id": "87b9321162328a95",
        "type": "ui_text",
        "z": "401e3b9f05284c7f",
        "group": "0a28a47fef5d42d6",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "16",
        "color": "#737373",
        "x": 690,
        "y": 1160,
        "wires": []
    },
    {
        "id": "32296f35d342d65a",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "Disable Button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Turn Off Alarm",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 1100,
        "wires": [
            [
                "a2a6244eb314fd4e",
                "c4c720a4550135f2"
            ]
        ]
    },
    {
        "id": "e73d2a67bee18c54",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "function 2",
        "func": "const now = new Date();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst seconds = now.getSeconds();\nconst currentTimeInSecs = (hours * 60 * 60) + (minutes * 60) + (seconds);\nconst alarms_on = global.get(\"alarms_on\");\n\nif (!alarms_on) {\n    return [{ enabled: false }, { payload: \"Alarms are Disabled\" }]\n}\n\nif (msg.payload !== undefined && currentTimeInSecs - msg.payload.latestTime < 2) {\n        return [{ enabled: true }, {\n            payload: \"Alarm \" + msg.payload.latestAlarm + \" Ringing\"\n        }]\n}\nelse {\n    return [{ enabled: false }, {\n        payload: \"No Alarms Ringing\"\n    }]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1120,
        "wires": [
            [
                "a2a6244eb314fd4e"
            ],
            [
                "87b9321162328a95"
            ]
        ]
    },
    {
        "id": "79db5c73ac3272f0",
        "type": "inject",
        "z": "401e3b9f05284c7f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "latest_alarm",
        "payloadType": "global",
        "x": 140,
        "y": 1120,
        "wires": [
            [
                "e73d2a67bee18c54"
            ]
        ]
    },
    {
        "id": "87464a197be13511",
        "type": "mqtt in",
        "z": "401e3b9f05284c7f",
        "name": "Receive Alarm Ringing Status",
        "topic": "alarm-ringing",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5bd5d9ab086b9bc1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1040,
        "wires": [
            [
                "461ac07fcd5b4139"
            ]
        ]
    },
    {
        "id": "461ac07fcd5b4139",
        "type": "function",
        "z": "401e3b9f05284c7f",
        "name": "function 3",
        "func": "const now = new Date();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst seconds = now.getSeconds();\nconst totalTimeInSecs = (hours * 60 * 60) + (minutes * 60) + (seconds);\n\nlet latestRinging = {\n    latestAlarm: msg.payload,\n    latestTime: totalTimeInSecs\n};\n\nreturn { payload: latestRinging };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1040,
        "wires": [
            [
                "2bda9c4a605ed416"
            ]
        ]
    },
    {
        "id": "2bda9c4a605ed416",
        "type": "change",
        "z": "401e3b9f05284c7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "latest_alarm",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "c4c720a4550135f2",
        "type": "mqtt out",
        "z": "401e3b9f05284c7f",
        "name": "Publish Stop Alarm",
        "topic": "stop-alarm-from-dashboard",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5bd5d9ab086b9bc1",
        "x": 1170,
        "y": 1100,
        "wires": []
    }
]